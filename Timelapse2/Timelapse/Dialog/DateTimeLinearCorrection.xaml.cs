using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using Timelapse.Controls;
using Timelapse.Database;
using Timelapse.Dialog;
using Timelapse.Util;

namespace Timelapse
{
    /// <summary>
    /// Interaction logic for DialogDateTimeLinearCorrection.xaml
    /// This dialog lets the user specify a corrected date and time of a file. All other dates and times are then corrected by the same amount.
    /// This is useful if (say) the camera was not initialized to the correct date and time.
    /// </summary>
    public partial class DateTimeLinearCorrection : BusyableDialogWindow
    {
        #region Private Variables
        private readonly FileDatabase fileDatabase;

        // Tracks whether any changes to the data or database are made
        private bool IsAnyDataUpdated;

        private DateTimeOffset latestImageDateTime;
        private DateTimeOffset earliestImageDateTime;

        // To help determine periodic updates to the progress bar 
        private DateTime lastRefreshDateTime = DateTime.Now;
        #endregion

        #region Constructor, Loaded, Closing, AutoGenerated
        // Create the interface
        public DateTimeLinearCorrection(Window owner, FileDatabase fileDatabase) : base(owner)
        {
            // Check the arguments for null 
            ThrowIf.IsNullArgument(fileDatabase, nameof(fileDatabase));

            this.InitializeComponent();
            this.fileDatabase = fileDatabase;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // Set up a progress handler that will update the progress bar
            this.InitalizeProgressHandler(this.BusyCancelIndicator);

            // Set up the initial UI and values
            this.latestImageDateTime = DateTimeOffset.MinValue;
            this.earliestImageDateTime = DateTimeOffset.MaxValue;

            // Search the images for the two images with the earliest and latest data/time date 
            ImageRow latestImageRow = null;
            ImageRow earliestImageRow = null;
            foreach (ImageRow image in this.fileDatabase.FileTable)
            {
                DateTimeOffset currentImageDateTime = image.DateTimeIncorporatingOffset;

                // If the current image's date is later, then it is a candidate latest image  
                if (currentImageDateTime >= this.latestImageDateTime)
                {
                    latestImageRow = image;
                    this.latestImageDateTime = currentImageDateTime;
                }

                // If the current image's date is earlier, then it is a candidate earliest image  
                if (currentImageDateTime <= this.earliestImageDateTime)
                {
                    earliestImageRow = image;
                    this.earliestImageDateTime = currentImageDateTime;
                }
            }

            // At this point, we should have succeeded getting the oldest and newest data/time

            // Configure the earliest date (in datetime picker) and its image
            this.earliestImageName.Content = earliestImageRow.File;
            this.earliestImageDate.Content = DateTimeHandler.ToStringDisplayDateTime(this.earliestImageDateTime);
            this.imageEarliest.Source = earliestImageRow.LoadBitmap(this.fileDatabase.FolderPath, out bool isCorruptOrMissing);

            // Configure the latest date (in datetime picker) and its image
            this.latestImageName.Content = latestImageRow.File;
            DataEntryHandler.Configure(this.dateTimePickerLatestDateTime, this.latestImageDateTime.DateTime);
            this.dateTimePickerLatestDateTime.ValueChanged += this.DateTimePicker_ValueChanged;
            this.imageLatest.Source = latestImageRow.LoadBitmap(this.fileDatabase.FolderPath, out isCorruptOrMissing);
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            this.DialogResult = this.Token.IsCancellationRequested || this.IsAnyDataUpdated;
        }

        // Label and size the datagrid column headers
        private void DatagridFeedback_AutoGeneratedColumns(object sender, EventArgs e)
        {
            this.FeedbackGrid.Columns[0].Header = "File name (only for files whose date was changed)";
            this.FeedbackGrid.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            this.FeedbackGrid.Columns[1].Header = "Old date  \x2192  New Date \x2192 Delta";
            this.FeedbackGrid.Columns[1].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
        }
        #endregion

        #region Calculate times and Update files
        // Set up all the Linear Corrections as an asynchronous task which updates the progress bar as needed
        private async Task<ObservableCollection<DateTimeFeedbackTuple>> TaskLinearCorrectionAsync(TimeSpan newestImageAdjustment, TimeSpan intervalFromOldestToNewestImage)
        {
            // A side effect of running this task is that the FileTable will be updated, which means that,
            // at the very least, the calling function will need to run FilesSelectAndShow to either
            // reload the FileTable with the updated data, or to reset the FileTable back to its original form
            // if the operation was cancelled.
            this.IsAnyDataUpdated = true;

            // Reread the Date/Times from each file 
            return await Task.Run(() =>
            {
                // Collects feedback to display in a datagrid after the operation is done
                ObservableCollection<DateTimeFeedbackTuple> feedbackRows = new ObservableCollection<DateTimeFeedbackTuple>();

                int count = this.fileDatabase.FileTable.RowCount;
                this.DatabaseUpdateFileDates(this.Progress, intervalFromOldestToNewestImage, newestImageAdjustment, feedbackRows);

                // Provide feedback if the operation was cancelled during the database update
                if (Token.IsCancellationRequested == true)
                {
                    feedbackRows.Clear();
                    feedbackRows.Add(new DateTimeFeedbackTuple("Cancelled", "No changes were made"));
                    this.IsAnyDataUpdated = false;
                    return feedbackRows;
                }
                return feedbackRows;
            }, this.Token).ConfigureAwait(continueOnCapturedContext: true); // Set to true as we need to continue in the UI context
        }

        private void DatabaseUpdateFileDates(IProgress<ProgressBarArguments> progress, TimeSpan intervalFromOldestToNewestImage, TimeSpan newestImageAdjustment, ObservableCollection<DateTimeFeedbackTuple> feedbackRows)
        {
            if (intervalFromOldestToNewestImage == TimeSpan.Zero)
            {
                this.fileDatabase.UpdateAdjustedFileTimes(newestImageAdjustment);
            }
            else
            {
                // Note that this passes a function which is invoked by the fileDatabase method. 
                // This not only calculates the new times, but updates the progress bar as the fileDatabase method iterates through the files.
                this.fileDatabase.UpdateAdjustedFileTimes(
                   (string fileName, int fileIndex, int count, DateTimeOffset imageDateTime) =>
                   {
                       double imagePositionInInterval = (imageDateTime - this.earliestImageDateTime).Ticks / (double)intervalFromOldestToNewestImage.Ticks;
                       Debug.Assert((-0.0000001 < imagePositionInInterval) && (imagePositionInInterval < 1.0000001), String.Format("Interval position {0} is not between 0.0 and 1.0.", imagePositionInInterval));
                       TimeSpan adjustment = TimeSpan.FromTicks((long)(imagePositionInInterval * newestImageAdjustment.Ticks)); // Used to have a  .5 increment, I think to force rounding upwards                                                                                                        // TimeSpan.Duration means we do these checks on the absolute value (positive) of the Timespan, as slow clocks will have negative adjustments.
                       Debug.Assert((TimeSpan.Zero <= adjustment.Duration()) && (adjustment.Duration() <= newestImageAdjustment.Duration()), String.Format("Expected adjustment {0} to be within [{1} {2}].", adjustment, TimeSpan.Zero, newestImageAdjustment));

                       if (adjustment.Duration() >= TimeSpan.FromSeconds(1))
                       {
                           // We only add to the feedback row if the change duration is > 1 second, as otherwise we don't change it.
                           string oldDT = DateTimeHandler.ToStringDisplayDateTime(imageDateTime);
                           string newDT = DateTimeHandler.ToStringDisplayDateTime(imageDateTime + adjustment);
                           feedbackRows.Add(new DateTimeFeedbackTuple(fileName, oldDT + " \x2192 " + newDT + " \x2192 " + PrettyPrintTimeAdjustment(adjustment)));
                       }

                       // Update the progress bar every time interval to indicate what file we are working on
                       TimeSpan intervalFromLastRefresh = DateTime.Now - this.lastRefreshDateTime;
                       if (intervalFromLastRefresh > Constant.ThrottleValues.ProgressBarRefreshInterval)
                       {
                           int percentDone = Convert.ToInt32(fileIndex / Convert.ToDouble(count) * 100.0);
                           progress.Report(new ProgressBarArguments(percentDone, String.Format("Pass 1: Calculating new date/times for {0} / {1} files", fileIndex, count), true, false));
                           Thread.Sleep(Constant.ThrottleValues.RenderingBackoffTime);  // Allows the UI thread to update every now and then
                           this.lastRefreshDateTime = DateTime.Now;
                       }

                       if (fileIndex >= count)
                       {
                           // After all files are processed, the next step would be updating the database. Disable the cancel button too.
                           // This really should be somehow signalled from the invoking method (ideally ExecuteNonQueryWrappedInBeginEnd every update interval), but this is a reasonable workaround.
                           progress.Report(new ProgressBarArguments(100, String.Format("Pass 2: Updating {0} files. Please wait...", feedbackRows.Count), false, true));
                           Thread.Sleep(Constant.ThrottleValues.RenderingBackoffTime);  // Allows the UI thread to update every now and then
                       }
                       return imageDateTime + adjustment; // Returns the new time
                   },
                   0,
                   this.fileDatabase.CountAllCurrentlySelectedFiles - 1,
                   this.Token);
            }
        }
        #endregion

        #region Button callbacks
        // Set up the UI and invoke the linear correction 
        private async void Start_Click(object sender, RoutedEventArgs e)
        {
            // A few checks just to make sure we actually have something to do...
            if (this.dateTimePickerLatestDateTime.Value.HasValue == false)
            {
                // We don't have a valid date, so nothing really to do.
                // This should not happen
                System.Windows.MessageBox.Show("Could not change the date/time, as it date is not in a format recognized by Timelapse.");
                return;
            }

            // Configure the UI's initial state
            this.CancelButton.IsEnabled = false;
            this.CancelButton.Visibility = Visibility.Hidden;
            this.StartDoneButton.Content = "_Done";
            this.StartDoneButton.Click -= this.Start_Click;
            this.StartDoneButton.Click += this.DoneButton_Click;
            this.StartDoneButton.IsEnabled = false;
            this.BusyCancelIndicator.IsBusy = true;
            this.WindowCloseButtonIsEnabled(false);

            TimeSpan newestImageAdjustment = this.dateTimePickerLatestDateTime.Value.Value - this.latestImageDateTime.DateTime;
            TimeSpan intervalFromOldestToNewestImage = this.latestImageDateTime - this.earliestImageDateTime;
            if (newestImageAdjustment == TimeSpan.Zero)
            {
                // nothing to do
                this.DialogResult = false;
                return;
            }

            // This call does all the actual updating...
            ObservableCollection<DateTimeFeedbackTuple> feedbackRows = await this.TaskLinearCorrectionAsync(newestImageAdjustment, intervalFromOldestToNewestImage).ConfigureAwait(true);

            // Hide the busy indicator and update the UI, e.g., to show which files have changed dates
            // Provide summary feedback 
            if (this.IsAnyDataUpdated && this.Token.IsCancellationRequested == false)
            {
                string message = string.Format("Updated {0}/{1} files whose dates have changed.", feedbackRows.Count, this.fileDatabase.CountAllCurrentlySelectedFiles);
                feedbackRows.Insert(0, (new DateTimeFeedbackTuple("---", message)));
            }

            this.BusyCancelIndicator.IsBusy = false;
            this.PrimaryPanel.Visibility = Visibility.Collapsed;
            this.FeedbackPanel.Visibility = Visibility.Visible;
            this.FeedbackGrid.ItemsSource = feedbackRows;
            this.StartDoneButton.IsEnabled = true;
            this.WindowCloseButtonIsEnabled(true);
        }

        private void DoneButton_Click(object sender, RoutedEventArgs e)
        {
            // We return false if the database was not altered, i.e., if this was all a no-op
            this.DialogResult = this.IsAnyDataUpdated;
        }

        // Cancel - do nothing
        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
        }
        #endregion

        #region DateTimePicker callbacks
        private void DateTimePicker_ValueChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            // Because of the bug in the DateTimePicker, we have to get the changed value from the string
            // as DateTimePicker.Value.Value can have the old date rather than the new one.
            if (DateTimeHandler.TryParseDisplayDateTimeString(this.dateTimePickerLatestDateTime.Text, out DateTime newDateTime) == false)
            {
                // If we can't parse the date,  do nothing.
                // System.Diagnostics.Debug.Print("DateTimeLinearCorrection|ValueChanged: Could not parse the date:" + this.dateTimePickerLatestDateTime.Text);
                return;
            }

            // Inform the user if the date picker date goes below the earlest time,  
            if (this.dateTimePickerLatestDateTime.Value.Value <= this.earliestImageDateTime)
            {
                Dialogs.DateTimeNewTimeShouldBeLaterThanEarlierTimeDialog(this);
            }

            // Enable the Ok button only if the latest time has actually changed from its original version
            TimeSpan newestImageAdjustment = newDateTime - this.latestImageDateTime;
            this.StartDoneButton.IsEnabled = newestImageAdjustment != TimeSpan.Zero;
        }

        // Mitigates a bug where ValueChanged is not triggered when the date/time is changed
        private void DateTimePickerLatestDateTime_MouseLeave(object sender, System.Windows.Input.MouseEventArgs e)
        {
            this.DateTimePicker_ValueChanged(null, null);
        }
        #endregion

        #region Utility methods
        // Given the time adjustment to the date, generate a pretty-printed string taht we can use in our feedback
        private static string PrettyPrintTimeAdjustment(TimeSpan adjustment)
        {
            string sign = (adjustment < TimeSpan.Zero) ? "-" : "+";

            // Pretty print the adjustment time, depending upon how many day(s) were included 
            string format;
            if (adjustment.Days == 0)
            {
                format = "{0:s}{1:D2}:{2:D2}:{3:D2}"; // Don't show the days field
            }
            else
            {
                // includes singular or plural form of days
                format = (adjustment.Duration().Days == 1) ? "{0:s}{1:D2}:{2:D2}:{3:D2} {0:s} {4:D} day" : "{0:s}{1:D2}:{2:D2}:{3:D2} {0:s} {4:D} days";
            }
            return string.Format(format, sign, adjustment.Duration().Hours, adjustment.Duration().Minutes, adjustment.Duration().Seconds, adjustment.Duration().Days);
        }
        #endregion
    }
}
