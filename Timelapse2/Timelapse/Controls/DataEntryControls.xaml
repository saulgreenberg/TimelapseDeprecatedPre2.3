<UserControl x:Class="Timelapse.Controls.DataEntryControls"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Control.Resources>
        <!--Normal Border Color  LightBlue #ADD8E6  173, 216, 230   Value="{StaticResource BorderBrushCommonNormal}" -->
        <!--Highlit Border Color Blue      #0000FF	0, 0, 255       Value="{StaticResource BorderBrushCommonHighlight}"-->
        <SolidColorBrush x:Key="BorderBrushCommonNormal" Color="LightBlue" />
        <SolidColorBrush x:Key="BorderBrushCommonHighlight" Color="Blue" />

        <!--Normal  Border Thickness  1 "{StaticResource BorderThicknessCommonNormal}" -->
        <!--Highlit Border Thickness  2 "{StaticResource BorderThicknessCommonHighlight}" -->
        <Thickness  x:Key="BorderThicknessCommonNormal">1</Thickness>
        <Thickness  x:Key="BorderThicknessCommonHighlight">3</Thickness>

        <!-- DefaultLabel Style: Properties -->
        <Style x:Key="DefaultLabel" TargetType="Label">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,4,5,0"/>
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Height" Value="25" />
        </Style>

        <!--NoteTextBox Style: Properties-->
        <Style x:Key="NoteTextBox" TargetType="TextBox">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,0,5,0"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Background" Value="Aquamarine"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{StaticResource BorderBrushCommonNormal}" BorderThickness="{StaticResource BorderThicknessCommonNormal}" Background="White">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="White"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- If its Focuses, make the border thicker AND if its not Readonly (i.e., editable, also change the border color -->
                            <MultiTrigger >
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsKeyboardFocused" Value="true" />
                                    <Condition Property="IsReadOnly" Value="false" />
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrushCommonHighlight}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource BorderThicknessCommonHighlight}" />
                            </MultiTrigger>
                            <MultiTrigger >
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsKeyboardFocused" Value="true" />
                                    <Condition Property="IsReadOnly" Value="true" />
                                </MultiTrigger.Conditions>
                                <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrushCommonHighlight}" />-->
                                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource BorderThicknessCommonHighlight}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <!-- CounterTextBox Style: Properties -->
        <Style x:Key="CounterTextBox" TargetType="xctk:IntegerUpDown">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,0,5,0"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="Margin" Value="-5,0,0,0" />
            <Setter Property="Minimum" Value="0"/>
            <Setter Property="DisplayDefaultValueOnEmptyText" Value="true" />
            <Setter Property="DefaultValue" Value="{x:Null}" />
            <Setter Property="AllowTextInput" Value="true" />
        </Style>

        <!-- DateTimeBox Style: Properties -->
        <Style x:Key="DateTimeBox" TargetType="xctk:DateTimePicker">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
        </Style>

        <!-- UTCOffsetBox Style: Properties -->
        <Style x:Key="UTCOffsetBox" TargetType="xctk:TimeSpanUpDown">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
        </Style>

        <!-- ChoiceComboBox Style - implements a Flat Choice style -->
        <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#fff" />
        <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
        <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
        <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

        <!-- ComboBox Toggle Button Template  -->
        <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>

                <!-- ComboBox Toggle Button Border  -->
                <Border Grid.ColumnSpan="2" Name="Border"
                    BorderBrush="{StaticResource BorderBrushCommonNormal}" 
                    CornerRadius="0" BorderThickness="{StaticResource BorderThicknessCommonNormal}"
                    Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

                <!-- ComboBox Toggle Button Button Border  -->
                <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder"
                    CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
                    Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

                <!-- ComboBox Toggle Button Arrow  -->
                <Path Name="Arrow" Grid.Column="1" 
                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                    HorizontalAlignment="Center" Fill="#444"
                    VerticalAlignment="Center" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                    <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                    <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
                </Trigger>

            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Choice ComboBox Template  -->
        <Style x:Key="ChoiceComboBox"  TargetType="{x:Type ComboBox}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="28" />
            <Setter Property="Padding" Value="5,4,5,5"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="IsEditable" Value="False" />

            <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="TextElement.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>

            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Border Name="PART_Border" BorderBrush="{StaticResource BorderBrushCommonNormal}" BorderThickness="{StaticResource BorderThicknessCommonNormal}">
                            <Grid>
                                
                                <!-- Toggle button  -->
                                <ToggleButton Name="ToggleButton" Grid.Column="2"
                                ClickMode="Press" 
                                Focusable="False"
                                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                                <!--Content Presenter-->
                                <ContentPresenter Name="ContentSite" 
                                    Margin="5, 3, 23, 3" IsHitTestVisible="False"
                                    HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                    Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                    ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />

                                <!--PART_EditableTextBox-->                                
                                <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"  
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Visibility="Hidden" Background="Transparent"
                                HorizontalAlignment="Left" VerticalAlignment="Center"
 
                                Focusable="True">
                                    <TextBox.Template>
                                        <ControlTemplate TargetType="TextBox" >
                                            <Border Name="PART_ContentHost" Focusable="False"/>
                                        </ControlTemplate>
                                    </TextBox.Template>
                                </TextBox>

                                <!-- Popup showing items -->
                                <Popup Name="Popup" Placement="Bottom"
                                    Focusable="False" 
                                    AllowsTransparency="True"
                                    IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                                    PopupAnimation="Slide">
                                    <Grid Name="DropDown" SnapsToDevicePixels="True"
                                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                        <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0"
                                            CornerRadius="0" 
                                            BorderThickness="{StaticResource BorderThicknessCommonNormal}"
                                            BorderBrush="{StaticResource BorderBrushCommonNormal}" 
                                            />
                                        <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--When we tab to the control, accentuate the outline. -->
                            <Trigger Property="ComboBox.IsFocused" Value="True">
                                <Setter TargetName="PART_Border" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}" />
                            </Trigger>

                            <Trigger Property="ComboBox.IsDropDownOpen" Value="True">
                                <Setter TargetName="PART_Border" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}" />
                            </Trigger>

                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="True">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Counter Button Style -->
        <SolidColorBrush x:Key="CounterBrushDisabledForeground" Color="#888" />
        <Style x:Key="CounterButton" TargetType="RadioButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Margin" Value="5,0,5,0" />
            <Setter Property="Padding" Value="8,0,8,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">

                        <BulletDecorator Cursor="Hand" VerticalAlignment="Center">

                            <!--Bullet Checkmark-->
                            <BulletDecorator.Bullet >
                                <Grid Height="25" Width="18" >

                                    <!-- Border surrounding the checkmark-->
                                    <Border Name="TickMarkBorder" CornerRadius="3,0,0,3" BorderBrush="Silver" BorderThickness="{StaticResource BorderThicknessCommonNormal}" Height="25" Background="White"/>
                                    <Canvas Name="TickMark" Opacity=".1">
                                        <!-- Mark-->
                                        <Ellipse Name="Mark" Width="10" Height="10" Stroke="Blue" StrokeThickness="2" Fill="LightBlue"  Canvas.Top="7.5" Canvas.Left="4"/>
                                        <!-- Black Outline -->
                                        <Ellipse Width="11" Height="11" Stroke="Black" StrokeThickness="1" Canvas.Top="7" Canvas.Left="3.5"/>
                                        <!-- White Outline -->
                                        <Ellipse Width="12" Height="12" Stroke="White" StrokeThickness="1" Canvas.Top="6.3"  Canvas.Left="3"/>
                                        <!-- Glow-->
                                        <Ellipse Name="Glow" Width="15" Height="15" Stroke="Blue" StrokeThickness="2" Canvas.Top="5.0"  Canvas.Left="1.5" Opacity=".35"/>
                                    </Canvas>

                                </Grid>
                            </BulletDecorator.Bullet>

                            <!--Border surrounding the Text element plus the text-->
                            <Border BorderBrush="Silver" BorderThickness="{StaticResource BorderThicknessCommonNormal}" CornerRadius="0,0,0,0" Width="Auto" Height="25" VerticalAlignment="Center" Margin="-2,0,0,0">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="White" Offset="0" />
                                        <GradientStop Color="#FFE2E2E2" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <TextBlock Name="text"  Margin="5,0,5,0" Foreground="Black" VerticalAlignment="Center" FontWeight="Bold">
                                    <ContentPresenter />
                                </TextBlock>
                            </Border>
                        </BulletDecorator>

                        <!--If item is checked, trigger the visibility of the mark-->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="TickMark" Property="Opacity" Value="1"/>
                                <Setter TargetName="TickMarkBorder" Property="Background" Value="LightBlue"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Mark" Property="Stroke" Value="Gold"/>
                                <Setter TargetName="Mark" Property="Fill" Value="LightYellow"/>
                                <Setter TargetName="Glow" Property="Stroke" Value="Gold"/>
                                <Setter TargetName="Glow" Property="Fill" Value="Gold"/>
                                <Setter TargetName="TickMark" Property="Opacity" Value=".5"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" TargetName="text" Value="{StaticResource CounterBrushDisabledForeground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

            <!-- Flag Checkbox Style: Fill brushes  -->
            <SolidColorBrush x:Key="FlagBrushNormal" Color="#FFF"/>
            <SolidColorBrush x:Key="FlagBrushDark" Color="#AAA"/>
            <SolidColorBrush x:Key="FlagBrushDisabledForeground" Color="#888" />
            <SolidColorBrush x:Key="FlagBrushDisabledBackground" Color="#EEE" />

            <!-- Flag Checkbox Style: Border brushes -->
            <SolidColorBrush x:Key="FlagBrushDisabledBorder" Color="#AAA" />
            <SolidColorBrush x:Key="FlagBrushHighlightBorder" Color="#FF707070" />
            <LinearGradientBrush x:Key="FlagBrushNormalBorder" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#CCC" Offset="0.0"/>
                        <GradientStop Color="#444" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <!-- Flag Checkbox Style: Glyph brushes -->
            <SolidColorBrush x:Key="FlagBrushGlyph" Color="#444" />
            <SolidColorBrush x:Key="FlagBrushGlyphLight" Color="Silver" />

            <Style x:Key="FlagCheckBox" TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FFF"/>
                <Setter Property="BorderBrush" Value="{StaticResource FlagBrushHighlightBorder}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Margin" Value="0,0,0,0"/>
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Height" Value="20" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="checkBoxBorder" 
                                    BorderBrush="{StaticResource FlagBrushNormalBorder}" 
                                    BorderThickness="{StaticResource BorderThicknessCommonNormal}" 
                                    Background="{StaticResource FlagBrushNormal}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Width="17" 
                                    Height="17" 
                                    CornerRadius="2" 
                                    Margin="1" >
                                    <Grid x:Name="markGrid">
                                        <Path x:Name="optionMark" 
                                          Width="11" 
                                          Height="11" 
                                          SnapsToDevicePixels="False" 
                                          Stroke="{StaticResource FlagBrushGlyph}"
                                          StrokeThickness="2"
                                          Data="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>

                                <!-- IsMouseOver True: Highlight -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource FlagBrushDark}"/>
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFF3F9FF"/>
                                </Trigger>

                                <!-- IsEnabled False: Mute the colors  -->
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource FlagBrushDisabledBackground}" />
                                    <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource FlagBrushDisabledBorder}" />
                                    <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushDisabledBorder}" />
                                    <Setter Property="Foreground" Value="{StaticResource FlagBrushDisabledForeground}"/>
                                    <!--<Setter Property="Background" TargetName="checkBoxBorder" Value="Red"/>-->
                                </Trigger>

                                <!-- Various conditions for IsPressed and IsChecked.
                                 The idea is that we preview a light checkmark (or ellipsis) when the button is pressed. -->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True" />
                                        <Condition Property="IsChecked" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushGlyphLight}" />
                                        <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True" />
                                        <Condition Property="IsChecked" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushGlyphLight}" />
                                        <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="False" />
                                        <Condition Property="IsChecked" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                                        <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="False" />
                                        <Condition Property="IsChecked" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True" />
                                        <Condition Property="IsChecked" Value="{x:Null}" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushGlyphLight}" />
                                        <Setter TargetName="optionMark" Property="Data" Value="M 2 8 L 3 8 M 5 8 L 6 8  M 8 8 L 9 8" />
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="False" />
                                        <Condition Property="IsChecked" Value="{x:Null}" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="optionMark" Property="Data" Value="M 2 8 L 3 8 M 5 8 L 6 8  M 8 8 L 9 8" />
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <!-- IsKeyboardFocused: Highlight the Flag with a blue thick border -->
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}"/>
                                    <Setter TargetName="checkBoxBorder" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!-- Container Style Properities -->
            <Style x:Key="ContainerStyle" TargetType="StackPanel">
                <Setter Property="Orientation" Value="Horizontal"/>
                <Setter Property="Margin" Value="0,0,10,0" />
                <Setter Property="Height" Value="35"/>
            </Style>
    </Control.Resources>
    
    <RichTextBox IsEnabled="True" IsDocumentEnabled="True" IsReadOnly="True" >
        <FlowDocument  >
            <Paragraph  Name="ControlGrid" TextAlignment="Left" >
                <Floater  HorizontalAlignment="Right" Width="75" Margin="0" Padding="0" >
                    <BlockUIContainer Name="ButtonLocation" Margin="0" Padding="0"> 
                        <!-- The actual controls will be inserted dynamically through Code Behind -->
                    </BlockUIContainer>
                </Floater>
            </Paragraph>
        </FlowDocument>
    </RichTextBox>
    
</UserControl>
